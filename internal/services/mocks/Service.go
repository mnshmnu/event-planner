// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "event-planner/internal/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddAvailability provides a mock function with given fields: ctx, availability
func (_m *Service) AddAvailability(ctx context.Context, availability *entities.Availability) error {
	ret := _m.Called(ctx, availability)

	if len(ret) == 0 {
		panic("no return value specified for AddAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Availability) error); ok {
		r0 = rf(ctx, availability)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthenticateUser provides a mock function with given fields: ctx, email, password
func (_m *Service) AuthenticateUser(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableSlots provides a mock function with given fields: ctx, duration
func (_m *Service) GetAvailableSlots(ctx context.Context, duration int) (map[time.Time][]int, error) {
	ret := _m.Called(ctx, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableSlots")
	}

	var r0 map[time.Time][]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (map[time.Time][]int, error)); ok {
		return rf(ctx, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) map[time.Time][]int); ok {
		r0 = rf(ctx, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[time.Time][]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *Service) RegisterUser(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleMeeting provides a mock function with given fields: ctx, organizerID, duration
func (_m *Service) ScheduleMeeting(ctx context.Context, organizerID int, duration int) (*entities.Meeting, error) {
	ret := _m.Called(ctx, organizerID, duration)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleMeeting")
	}

	var r0 *entities.Meeting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*entities.Meeting, error)); ok {
		return rf(ctx, organizerID, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *entities.Meeting); ok {
		r0 = rf(ctx, organizerID, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Meeting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, organizerID, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
