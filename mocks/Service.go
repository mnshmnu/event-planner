// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "event-planner/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AuthenticateUser provides a mock function with given fields: ctx, email, password
func (_m *Service) AuthenticateUser(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAvailability provides a mock function with given fields: ctx, a
func (_m *Service) CreateAvailability(ctx context.Context, a *entities.ParticipantAvailability) (int64, error) {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for CreateAvailability")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ParticipantAvailability) (int64, error)); ok {
		return rf(ctx, a)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ParticipantAvailability) int64); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.ParticipantAvailability) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventWithSlots provides a mock function with given fields: ctx, event, slots
func (_m *Service) CreateEventWithSlots(ctx context.Context, event *entities.Event, slots []*entities.EventSlot) (int64, error) {
	ret := _m.Called(ctx, event, slots)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventWithSlots")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Event, []*entities.EventSlot) (int64, error)); ok {
		return rf(ctx, event, slots)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Event, []*entities.EventSlot) int64); ok {
		r0 = rf(ctx, event, slots)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Event, []*entities.EventSlot) error); ok {
		r1 = rf(ctx, event, slots)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAvailability provides a mock function with given fields: ctx, id
func (_m *Service) DeleteAvailability(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, eventID
func (_m *Service) DeleteEvent(ctx context.Context, eventID int64) error {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailabilitiesByEvent provides a mock function with given fields: ctx, eventID
func (_m *Service) GetAvailabilitiesByEvent(ctx context.Context, eventID int64) ([]entities.ParticipantAvailability, error) {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailabilitiesByEvent")
	}

	var r0 []entities.ParticipantAvailability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entities.ParticipantAvailability, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entities.ParticipantAvailability); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ParticipantAvailability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailabilityByID provides a mock function with given fields: ctx, id
func (_m *Service) GetAvailabilityByID(ctx context.Context, id int64) (*entities.ParticipantAvailability, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailabilityByID")
	}

	var r0 *entities.ParticipantAvailability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.ParticipantAvailability, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.ParticipantAvailability); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ParticipantAvailability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: ctx, eventID
func (_m *Service) GetEventByID(ctx context.Context, eventID int64) (*entities.Event, error) {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 *entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.Event, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.Event); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByUser provides a mock function with given fields: ctx, userID
func (_m *Service) GetEventsByUser(ctx context.Context, userID int64) ([]*entities.Event, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByUser")
	}

	var r0 []*entities.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entities.Event, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entities.Event); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *Service) RegisterUser(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAvailability provides a mock function with given fields: ctx, a
func (_m *Service) UpdateAvailability(ctx context.Context, a *entities.ParticipantAvailability) error {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ParticipantAvailability) error); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *Service) UpdateEvent(ctx context.Context, event *entities.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
