// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// CompareHash provides a mock function with given fields: hPass, pass
func (_m *Auth) CompareHash(hPass []byte, pass []byte) (bool, error) {
	ret := _m.Called(hPass, pass)

	if len(ret) == 0 {
		panic("no return value specified for CompareHash")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) (bool, error)); ok {
		return rf(hPass, pass)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(hPass, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(hPass, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateHash provides a mock function with given fields: pass
func (_m *Auth) GenerateHash(pass string) ([]byte, error) {
	ret := _m.Called(pass)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(pass)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(pass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWTToken provides a mock function with given fields: payload
func (_m *Auth) GenerateJWTToken(payload map[string]interface{}) (string, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWTToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
